package org.sormas.e2etests.steps.web.application.events;

import static org.sormas.e2etests.pages.application.cases.CaseImportExportPage.CUSTOM_CASE_DELETE_BUTTON;
import static org.sormas.e2etests.pages.application.cases.CaseImportExportPage.CUSTOM_CASE_EXPORT_DOWNLOAD_BUTTON;
import static org.sormas.e2etests.pages.application.cases.CaseImportExportPage.EXPORT_CONFIGURATION_DATA_DISTRICT_CHECKBOX;
import static org.sormas.e2etests.pages.application.cases.CaseImportExportPage.NEW_EXPORT_CONFIGURATION_BUTTON;
import static org.sormas.e2etests.pages.application.cases.CaseImportExportPage.NEW_EXPORT_CONFIGURATION_SAVE_BUTTON;
import static org.sormas.e2etests.pages.application.events.EventParticipantsPage.EXPORT_EVENT_PARTICIPANT_CONFIGURATION_DATA_REGION_CHECKBOX;

import com.google.inject.Inject;
import com.opencsv.CSVParser;
import com.opencsv.CSVParserBuilder;
import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;
import com.opencsv.exceptions.CsvException;
import cucumber.api.java8.En;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import java.util.concurrent.TimeUnit;
import lombok.extern.slf4j.Slf4j;
import org.sormas.e2etests.entities.pojo.csv.CustomEventParticipantExportCSV;
import org.sormas.e2etests.enums.DistrictsValues;
import org.sormas.e2etests.enums.RegionsValues;
import org.sormas.e2etests.helpers.WebDriverHelpers;
import org.sormas.e2etests.state.ApiState;
import org.testng.asserts.SoftAssert;

@Slf4j
public class EventExportSteps implements En {

  @Inject
  public EventExportSteps(WebDriverHelpers webDriverHelpers, ApiState apiState, SoftAssert softly) {
    When(
        "I select specific data of event participant to export in Export Configuration",
        () -> {
          webDriverHelpers.clickOnWebElementBySelector(
              EXPORT_EVENT_PARTICIPANT_CONFIGURATION_DATA_REGION_CHECKBOX);
          webDriverHelpers.clickOnWebElementBySelector(EXPORT_CONFIGURATION_DATA_DISTRICT_CHECKBOX);
          webDriverHelpers.clickOnWebElementBySelector(NEW_EXPORT_CONFIGURATION_SAVE_BUTTON);
        });

    When(
        "I check if downloaded data generated by custom event option is correct",
        () -> {
          CustomEventParticipantExportCSV reader =
              parseCustomEventParticipantExport(
                  "./downloads/sormas_ereignisteilnehmer_" + LocalDate.now() + "_.csv");
          softly.assertEquals(
              reader.getRegion(),
              RegionsValues.VoreingestellteBundeslander.getName(),
              "First names are not equal");
          softly.assertEquals(
              reader.getDistrict(),
              DistrictsValues.VoreingestellterLandkreis.getName(),
              "Last names are not equal");
          softly.assertAll();
        });
    When(
        "I download created custom event participant export file",
        () -> {
          webDriverHelpers.clickOnWebElementBySelector(CUSTOM_CASE_EXPORT_DOWNLOAD_BUTTON);
          TimeUnit.SECONDS.sleep(5); // wait for download
        });
    When(
        "I click on the New Export Configuration button in Custom Event Participant Export popup",
        () -> webDriverHelpers.clickOnWebElementBySelector(NEW_EXPORT_CONFIGURATION_BUTTON));
    When(
        "I delete created custom event participant export file",
        () -> webDriverHelpers.clickOnWebElementBySelector(CUSTOM_CASE_DELETE_BUTTON));
  }

  public CustomEventParticipantExportCSV parseCustomEventParticipantExport(String fileName) {
    List<String[]> r = null;
    String[] values = new String[] {};
    CustomEventParticipantExportCSV builder = null;
    CSVParser csvParser = new CSVParserBuilder().withSeparator(';').build();
    try (CSVReader reader =
        new CSVReaderBuilder(new FileReader(fileName))
            .withCSVParser(csvParser)
            .withSkipLines(3) // parse only data
            .build()) {
      r = reader.readAll();
    } catch (IOException e) {
      log.error("IOException parseCustomEventParticipantExport: ", e);
    } catch (CsvException e) {
      log.error("CsvException parseCustomEventParticipantExport: ", e);
    }
    try {
      for (int i = 0; i < r.size(); i++) {
        values = r.get(i);
      }
      builder =
          CustomEventParticipantExportCSV.builder().region(values[0]).district(values[1]).build();
    } catch (NullPointerException e) {
      log.error("Null pointer exception parseCustomEventParticipantExport: ", e);
    }
    return builder;
  }
}
