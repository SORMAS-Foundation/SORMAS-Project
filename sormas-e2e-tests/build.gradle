import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat

plugins {
    id 'com.github.sherter.google-java-format' version '0.9'
    id "com.diffplug.spotless" version "5.12.4"
}

apply plugin: 'java'

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation("io.qameta.allure:allure-cucumber4-jvm:$allureCucumber4JvmVersion")
    testImplementation("io.qameta.allure:allure-gradle:$allureGradle")
    testImplementation("io.qameta.allure:allure-java-commons:$allureJavaCommonsVersion")
    testImplementation("io.qameta.allure:allure-rest-assured:$allureRestAssureVersion")
    testImplementation("ru.yandex.qatools.allure:allure-java-adaptor-api:$allureVersion")

    implementation("io.github.prashant-ramcharan:courgette-jvm:$ioGithubPrashantRamcharan") {
        exclude group: 'org.testng', module: 'testng'
        exclude group: 'org.yaml', module: 'testng'
    }
    implementation("io.github.bonigarcia:webdrivermanager:$webdrivermanager")
    implementation("org.seleniumhq.selenium:selenium-java:$seleniumhqVersion") {
        exclude group: 'com.google.guava', module: 'guava'
    }
    implementation("org.awaitility:awaitility:$orgAwaitility")
    testImplementation("org.awaitility:awaitility:$orgAwaitility")

    testImplementation("com.google.truth.extensions:truth-java8-extension:$truthVersion") {
        exclude group: 'com.google.guava', module: 'guava'
    }
    implementation("com.google.truth.extensions:truth-java8-extension:$truthVersion") {
        exclude group: 'com.google.guava', module: 'guava'
    }

    implementation("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")

    implementation("com.google.guava:guava:$guavaVersion")
    implementation("io.qameta.allure:allure-gradle:$allureGradle")

    implementation("com.google.inject:guice:$guiceVersion")
    implementation("io.cucumber:cucumber-guice:$cucumberVersion")

    implementation("org.slf4j:slf4j-api:$orgSlf4J")
    implementation("org.slf4j:slf4j-log4j12:$orgSlf4J")

    implementation("ch.qos.logback:logback-classic:$logBackVersion")
    implementation("ch.qos.logback:logback-core:$logBackVersion")

    implementation("com.github.javafaker:javafaker:$javaFakerVersion") { exclude module: 'org.yaml' }

    testImplementation group: 'org.assertj', name: 'assertj-core', version: assertjCore
}

task format(type: GoogleJavaFormat) {
    source 'src/main'
    source 'src/test'
    include '**/*.java'
}

tasks.withType(Test) {
    maxParallelForks = (int) (Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
    systemProperties = System.getProperties()
    systemProperties.remove("java.endorsed.dirs") // needs to be removed from Java 9
}

test {
    maxParallelForks = (int) (Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
    println("maxParallelForks : " + maxParallelForks)
    testLogging.showStandardStreams = true

    // Pass all properties
    systemProperties = System.getProperties() as Map<String, ?>
    systemProperties.remove("java.endorsed.dirs")
}
